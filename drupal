#!/bin/bash

# TODO
# Figure out how to import WYSIWYG settings
#
# ERROR (Check modules)
# Warning: Division by zero in theme_image_style_preview() (line 786 of /home/oxy/Projects/Drupal/dev/modules/image/image.admin.inc).
# Warning: array_intersect_key(): Argument #1 is not an array in theme_image_style_preview() (line 788 of /home/oxy/Projects/Drupal/dev/modules/image/image.admin.inc).)))))
# Notice: Undefined index: fields in field_info_fields() (line 592 of /home/oxy/Projects/Drupal/dev/modules/field/field.info.inc).
# Warning: Invalid argument supplied for foreach() in field_info_fields() (line 592 of /home/oxy/Projects/Drupal/dev/modules/field/field.info.inc).
# Notice: Undefined index: fields in field_info_fields() (line 592 of /home/oxy/Projects/Drupal/dev/modules/field/field.info.inc).
# Warning: Invalid argument supplied for foreach() in field_info_fields() (line 592 of /home/oxy/Projects/Drupal/dev/modules/field/field.info.inc).

PROGNAME=${0##*/} 
PROGVERSION=0.1

# Drush Configuration
DRUSH_ALIAS_DIR="$HOME/.drush/aliases"    # remember to add the dir in your drushrc.php
DRUSH_MAKE_FILE="$HOME/.drush/drush_make/base.make"
DRUSH_MAKE_FLAGS=

# Development station
DEV_ROOT="$HOME/Projects/Drupal"      # root directory where drupal projects are stored
DEV_DB_URL="mysql://root@localhost/"  # used to create the database and grant privileges
DEV_DB_USER="oxy"                     # user account drupal will use to connect to db
DEV_HOST="http://localhost/Drupal"    # URL to the local host root, domain will be a subdir

# User ID 1 Configuration
USER="admin"
PASS="adminl"
MAIL="admin@example.com"

# Extra
PUBLIC_KEY="$HOME/.ssh/id_rsa.pub"
SENDKEY=                              # transfer your public key during deployment
INSTALL_ROOT="`pwd`"                  # setup drupal in current working dir

# Variables set through user input
SITE_ID=                              # unique identifier used for the domain
SITE_PATH=
SITE_TITLE=
SITE_LANG=
SITE_PROFILE="minimal"

# Live station, variables set through user input
LIVE_ROOT="public_html"               # root directory
LIVE_DB_PROTOCOL="mysql://"
LIVE_DB_USER=
LIVE_DB_PASSWORD=
LIVE_DB=
LIVE_USER=
LIVE_PASSWORD=
LIVE_HOST=

MODULES_CORE=(
  menu field_ui
  contextual dashboard help overlay path
  file image list number 
)

MODULES_CONTRIB=( 
  libraries
  variable variable_admin variable_realm variable_store 
  entity token entity_token 
  ctools views views_ui 
  pathauto page_title
  date date_api date_popup date_popup_authored date_views
  media smartcrop colorbox
  devel admin_menu admin_menu_toolbar devel_generate admin_devel
  elements html5_tools blocktheme semanticviews
  wysiwyg ie6nomore invisimail menu_block transliteration
  features
  googleanalytics
  base misc_hooks
)

MODULE_FEATURES=(
  feature_base
)

MODULE_THEME=(
  base_theme
)

MODULE_I18N=(
  translation translation_helpers
  i18n i18n_block i18n_field i18n_node i18n_menu i18n_path i18n_redirect 
  i18n_select i18n_string i18n_sync i18n_translation i18n_variable l10n_update
)

MODULES_DISABLE=(
)

declare -A VARIABLES=(
  ["blocktheme_show_custom_block_theme"]=1
  ["blocktheme_themes"]="min|Minimalism"
  ["admin_menu_tweak_tabs"]=1
  ["configurable_timezones"]=0
  ["date_default_timezone"]="Europe/Helsinki"
  ["date_first_day"]="1"
  ["date_format_html5_tools_iso8601"]="c"
  ["date_format_ymd"]="Y-m-d"
  ["html5_tools_override_views_field_rewrite_elements"]=1
  ["ie6nomore_ie"]="lt IE 7"
  ["image_jpeg_quality"]="100"
  ["menu_block_suppress_core"]=1
  ["pathauto_node_pattern"]="[node:title]"
  ["pathauto_reduce_ascii"]=1
  ["pathauto_transliterate"]=1
  ["pathauto_update_action"]="2"
  ["site_default_country"]="FI"
  ["user_admin_role"]="3"
  ["user_cancel_method"]="user_cancel_block"
  ["user_default_timezone"]="0"
  ["user_email_verification"]=0
  ["user_register"]="0"
  ["admin_theme"]="seven"
  ["node_admin_theme"]=1
)

# Help info
usage() { 
  cat << EOF
  Usage: $PROGNAME [options]
         $PROGNAME -o <version> -c

  Drupal make script. Creates a new directory with the domain name within the
  specified path.

  Options:
EOF
  cat << EOF | column -s\& -t

    -h | help & show this output
    -v | version & show version information
    -d | deploy
    -s | sync with remote host
    -m | make the drupal project

EOF
}

# Drupal make, gathers user input and invokes drush make
make() {
  doing "Making Drupal site"

  echo -n "Enter the domain identifier: "
  read SITE_ID

  echo -n "Enter the title of the website: "
  read SITE_TITLE

  echo -n "Enter the language(s) to be included in the install separated by a comma: "
  read SITE_LANG

  SITE_PATH=${INSTALL_ROOT}/${SITE_ID}

  # Check to see if the install directory already exists
  if [ -d $SITE_PATH ]; then
    echo -e "$SITE_PATH already exists."
    exit 1
  fi

  setup

}

# Deploy the site to remote host
deploy() {
  doing "Deploy website to remote host"

  echo -n "Enter the domain identifier: "
  read DOMAIN_ID

  echo -n "Enter the remote host address: "
  read LIVE_HOST

  echo -n "Enter the remote user: "
  read LIVE_USER

  echo -n "Enter the remote user password: "
  read LIVE_PASSWORD

  echo -n "Enter the remote DB user: "
  read LIVE_DB_USER

  echo -n "Enter the remote DB password: "
  read LIVE_DB_PASSWORD

  echo -n "Enter the remote DB name: "
  read LIVE_DB

  createAlias

  if [ $SENDKEY ]; then
    sendKey
  fi

  sync
}

# Sync local and remote host
sync() {
  doing "Pushing site live"
}

# Create the Drupal site with info supplied from the make function
setup() {

  doing "Setting up the install at ${SITE_PATH}"
  if [ [ $SITE_LANG != "en" ] || [ $SITE_LANG ] ]; then
    drush make ${DRUSH_MAKE_FLAGS} --translations=${SITE_LANG} ${DRUSH_MAKE_FILE} ${SITE_PATH}
  else
    drush make ${MAKE_FLAGS} ${DRUSH_MAKE_FILE} ${SITE_PATH}
  fi

  cd $SITE_PATH

  doing "Installing Drupalâ€¦"
  local DB="--db-url=${DEV_DB_URL}${SITE_ID}"
  drush -y site-install ${SITE_PROFILE} ${DB} --locale=${SITE_LANG} --site-name=${SITE_TITLE} --account-name=${USER} --account-pass=${PASS} --account-mail=${MAIL}

  doing "Granting privileges to database user"
  mysql -uroot -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON ${SITE_ID}.* TO '${DEV_DB_USER}'@'localhost';"
  mysql -uroot -e "FLUSH PRIVILEGES;"

  # Enable desired modules
  enableModules ${MODULES_CORE[@]}
  enableModules ${MODULES_CONTRIB[@]}
  enableModules ${MODULES_THEME[@]}
  enableModules ${MODULES_FEATURES[@]}

  setVariables VARIABLES

  doing "Allow write access to files folder"
  chmod -R a+w ./sites/default/files

  doing "Finished the installation!"
  google-chrome `drush --uri=${DEV_HOST}/${SITE_ID} user-login`
}

# Enable all modules
enableModules() {
  for module in "${@}"; do
    drush -y pm-enable $module  
  done
}

setVariables() {
  for var in $(eval echo \${!${1}[@]}); do
    drush vset --always-set ${var} $(eval echo \${${1}["$var"]})
  done
}

# Create an alias file for the current drupal build
createAlias() {
    cat > ${DRUSH_ALIAS_DIR}/${DOMAIN_ID}.aliases.drushrc.php << EOF
    \$aliases['dev'] = array(
      'root' => '${DEV_ROOT}/${DIR}',
      'uri' => '${DEV_HOST}/${DIR}
    );
    \$aliases['live'] = array(
      'root' => '${LIVE_ROOT}',
      'uri' => '${LIVE_HOST}'
      'db-url' => '${LIVE_DB_PROTOCOL}${LIVE_DB_USER}:${LIVE_DB_PASSWORD}@localhost/${LIVE_DB}
      'remote-host' => '${LIVE_HOST}',
      'remote-user' => '${LIVE_USER}',
      )
    );
EOF
}

sendKey() {
  local DOMAIN=$LIVE_HOST | awk '{gsub("http://|www.|/.*","")}1'
  ssh -q -t -l ${LIVE_USER} ${DOMAIN} "umask 077; mkdir -p .ssh && cat >> .ssh/authorized_keys" < ${PUBLIC_KEY}
}

# Streamline echoing status
doing() {
  echo -e "\n$1"
}

# Check command flags invoked and store possible argumets
while getopts ":depmshvV" opt; do
  case $opt in
    d) #deploy
      deploy
      ;;
    p) #publickey
      SENDKEY=1
      ;;
    m) #make
      make
      exit 0
      ;;
    s) #sync
      sync
      exit 0
      ;;
    e) #enable modules
      enableModules ${MODULES_CORE[@]}
      enableModules ${MODULES_CONTRIB[@]}
      ;;
    V) #set variables
      setVariables VARIABLES 
      ;;

    # base flags
    h)
      usage
      exit 0
      ;;
    v)
      echo "$PROGVERSION"
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
